<!DOCTYPE html>
<html lang="en" data-theme="dark">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>FileCloud</title>
        <link rel="icon" href="/logo/logo.png" type="image/png" />
        <link rel="stylesheet" href="/styles.css" />
        <link rel="stylesheet" href="/home.css" />
    </head>
    <body>
        <div class="app-container">
            <!-- Sidebar -->
            <%- include("partials/sidebar.ejs") %>
            <!-- Main Content with Header -->
            <main class="main-content">
                <!-- Header -->
                <%- include("partials/header.ejs") %>

                <!-- Content Area -->
                <div class="content">
                    <% if (!locals.path) {%>
                    <!-- Files grid -->
                    <%- include("partials/filesGrid.ejs", {totlalFiles:
                    locals.totlalFiles, totalFolders: locals.totalFolders,
                    totalSize: locals.totalSize}) %> <%} %>
                    <!--folder content -->
                    <%- include("partials/folderContent.ejs", {files:
                    locals.files, folders: locals.folders, path: locals.path,
                    pathArray: locals.pathArray}) %>
                </div>
            </main>
        </div>

        <!-- Upload Modal -->
        <div id="uploadModal" class="modal">
            <form
                action="<%= locals.path %>/new/file"
                method="post"
                class="modal-content"
                enctype="multipart/form-data"
            >
                <div class="modal-header">
                    <h3>Upload Files</h3>
                </div>
                <div class="form-group">
                    <label for="fileInput">Select files to upload</label>
                    <input
                        type="file"
                        id="fileInput"
                        class="form-input"
                        multiple
                        name="file"
                    />
                </div>
                <input
                    type="hidden"
                    name="fileType"
                    id="fileType"
                    value="<%= locals.fileType %>"
                />
                <div class="modal-actions">
                    <button
                        class="btn btn-secondary"
                        onclick="closeModal('uploadModal')"
                        type="button"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        class="btn btn-primary"
                        onclick="uploadFiles()"
                    >
                        Upload
                    </button>
                </div>
            </form>
        </div>

        <!-- Create Folder Modal -->
        <div
            id="createFolderModal"
            class="modal <%= locals.error? 'active' : '' %>"
        >
            <form
                action="<%= locals.path %>/new/folder"
                method="post"
                class="modal-content"
            >
                <div class="modal-header">
                    <h3>Create New Folder</h3>
                </div>
                <% if(locals.error){ %>
                <div class="error">
                    <p class="error-message"><%=locals.error%></p>
                </div>
                <% } %>
                <div class="form-group">
                    <label for="folderName">Folder Name</label>
                    <input
                        type="text"
                        id="folderName"
                        class="form-input"
                        placeholder="Enter folder name"
                        name="folderName"
                    />
                </div>
                <div class="modal-actions">
                    <button
                        class="btn btn-secondary"
                        onclick="closeModal('createFolderModal')"
                        type="button"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        class="btn btn-primary"
                        onclick="createFolder()"
                    >
                        Create
                    </button>
                </div>
            </form>
        </div>

        <!-- Share Modal -->
        <div id="shareModal" class="modal">
            <form
                action="<%= locals.path %>/share"
                method="post"
                class="modal-content"
                id="shareForm"
                onsubmit="shareFile(event)"
            >
                <div class="modal-header">
                    <h3>Share File</h3>
                </div>
                <div class="form-group radio-group">
                    <label for="shareEmail">Now</label>
                    <input
                        type="radio"
                        id="shareTime"
                        class="form-input radio-input"
                        name="shareTime"
                        value="now"
                        checked
                    />
                </div>
                <div class="form-group radio-group">
                    <label for="shareEmail">After 1 day</label>
                    <input
                        type="radio"
                        id="shareTime"
                        class="form-input radio-input"
                        value="1day"
                        name="shareTime"
                    />
                </div>
                <div class="form-group">
                    <label for="shareEmail">Email Address</label>
                    <input
                        type="email"
                        id="shareEmail"
                        class="form-input"
                        placeholder="Enter email address"
                        name="email"
                    />
                </div>
                <div class="form-group">
                    <!-- <label for="sharePermission">Permission</label>
                    <select id="sharePermission" class="form-input">
                        <option value="view">Can View</option>
                        <option value="edit">Can Edit</option>
                    </select> -->
                </div>
                <div class="modal-actions">
                    <button
                        class="btn btn-secondary"
                        onclick="closeModal('shareModal')"
                        type="button"
                    >
                        Cancel
                    </button>
                    <button type="submit" class="btn share-btn btn-primary">
                        Share
                    </button>
                </div>
            </form>
        </div>

        <!-- Rename Modal -->
        <div id="renameModal" class="modal">
            <form
                action="<%= locals.path %>/item/rename"
                method="post"
                class="modal-content"
            >
                <div class="modal-header">
                    <h3>Rename</h3>
                </div>
                <div class="form-group">
                    <label for="newFileName">New Name</label>
                    <input
                        type="text"
                        id="newFileName"
                        class="form-input"
                        placeholder="Enter new name"
                        name="newFileName"
                    />
                </div>
                <input type="hidden" name="renameItem" id="rename-item" />
                <div class="modal-actions">
                    <button
                        class="btn btn-secondary"
                        onclick="closeModal('renameModal')"
                        type="button"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        class="btn btn-primary"
                        onclick="renameFile()"
                    >
                        Rename
                    </button>
                </div>
            </form>
        </div>

        <!-- Delete Modal -->
        <div id="deleteModal" class="modal">
            <form
                action="<%= locals.path %>/item/delete"
                method="post"
                class="modal-content"
            >
                <div class="modal-header">
                    <h3>Delete</h3>
                </div>
                <p class="delete-message"></p>
                <input type="hidden" name="deleteItems" id="delete-items" />
                <div class="modal-actions">
                    <button
                        class="btn btn-secondary"
                        onclick="closeModal('deleteModal')"
                        type="button"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        class="btn btn-danger"
                        onclick="deleteFile()"
                    >
                        Delete
                    </button>
                </div>
            </form>
        </div>

        <script>
            // Modal functions
            function openUploadModal() {
                const path = "<%= locals.path %>";
                if (!path) return;
                document.getElementById("uploadModal").classList.add("active");
            }

            function openCreateFolderModal() {
                const path = "<%= locals.path %>";
                if (!path) return;
                document
                    .getElementById("createFolderModal")
                    .classList.add("active");
            }

            function closeModal(modalId) {
                document.getElementById(modalId).classList.remove("active");
            }

            // Action functions
            function uploadFiles() {
                const fileInput = document.getElementById("fileInput");
                if (fileInput.files.length > 0) {
                    closeModal("uploadModal");
                }
            }

            function createFolder() {
                const folderName = document.getElementById("folderName").value;
                if (folderName) {
                    closeModal("createFolderModal");
                }
            }

            function downloadFile() {}

            // Close modal when clicking outside
            window.addEventListener("click", function (event) {
                const modals = document.querySelectorAll(".modal");
                modals.forEach((modal) => {
                    if (event.target === modal) {
                        modal.classList.remove("active");
                    }
                });
            });

            // File selection
            const removeActiveClass = () => {
                const activeElements = document.querySelectorAll(".active");

                // remove active class
                if (activeElements) {
                    activeElements.forEach((element) => {
                        element.classList.remove("active");
                    });
                }
            };
            const path = window.location.pathname;

            if (path.includes("/Documents")) {
                removeActiveClass();
                document
                    .querySelectorAll(".documents")
                    .forEach((element) => element.classList.add("active"));
            }
            if (path.includes("/Images")) {
                removeActiveClass();
                document
                    .querySelectorAll(".images")
                    .forEach((element) => element.classList.add("active"));
            }
            if (path.includes("/Videos")) {
                removeActiveClass();
                document
                    .querySelectorAll(".videos")
                    .classList.add("active")
                    .forEach((element) => element.classList.add("active"));
            }
            // diable folder/file being active when view file/folder is clicked
            const viewLinks = document.querySelectorAll(
                ".view-file, .view-folder"
            );
            viewLinks.forEach((link) => {
                link.addEventListener("click", (e) => {
                    e.stopPropagation();
                });
            });

            // delete actions
            const selectedItems = {};
            const folders = document.querySelectorAll(".folder");
            folders.forEach((folder) => {
                folder.addEventListener("click", () => {
                    const id = folder.getAttribute("data-id");
                    if (!selectedItems["folders"])
                        selectedItems["folders"] = new Set();
                    if (selectedItems["folders"].has(id)) {
                        selectedItems["folders"].delete(id);
                    } else {
                        selectedItems["folders"].add(id);
                    }

                    folder.classList.toggle("active-folder");
                });
            });

            const files = document.querySelectorAll(".file");
            files.forEach((file) => {
                file.addEventListener("click", () => {
                    const id = file.getAttribute("data-id");
                    if (!selectedItems["files"])
                        selectedItems["files"] = new Set();
                    if (selectedItems["files"].has(id)) {
                        selectedItems["files"].delete(id);
                    } else {
                        selectedItems["files"].add(id);
                    }

                    file.classList.toggle("active-file");
                });
            });

            function openDeleteModal() {
                if (Object.keys(selectedItems).length === 0) return;
                const itemsAmount = Object.values(selectedItems).reduce(
                    (acc, curr) => acc + curr.size,
                    0
                );
                const deleteMessage = document.querySelector(".delete-message");
                deleteMessage.textContent = `Are you sure you want to delete ${itemsAmount} item(s)? This action cannot be undone.`;
                document.getElementById("deleteModal").classList.add("active");
            }

            function deleteFile() {
                const input = document.getElementById("delete-items");
                const itemsToDelete = {
                    folders: Array.from(selectedItems["folders"] || []),
                    files: Array.from(selectedItems["files"] || []),
                };
                input.value = JSON.stringify(itemsToDelete);

                closeModal("deleteModal");
            }

            // rename actions

            function openRenameModal() {
                const input = document.getElementById("rename-item");
                if (!Object.keys(selectedItems).length > 0) return;
                const canRename =
                    Object.values(selectedItems).filter((set) => set.size === 1)
                        .length === 1;
                if (!canRename) return;

                const selected = Object.keys(selectedItems).find(
                    (key) => selectedItems[key].size === 1
                );
                const itemToRename = Array.from(selectedItems[selected])[0];
                const element =
                    selected === "files"
                        ? document.querySelector(
                              `.file[data-id="${itemToRename}"]`
                          )
                        : document.querySelector(
                              `.folder[data-id="${itemToRename}"]`
                          );
                const previousName = element.querySelector(".name").textContent;
                const modalInput = document.getElementById("newFileName");
                modalInput.value = previousName;
                document.getElementById("renameModal").classList.add("active");
                if (modalInput) {
                    setTimeout(() => {
                        modalInput.focus();
                        modalInput.select();
                    }, 0);
                }
            }

            function renameFile() {
                const input = document.getElementById("rename-item");
                const newFileName =
                    document.getElementById("newFileName").value;
                if (!newFileName) return;
                const selected = Object.keys(selectedItems)[0];
                const itemToRename = Array.from(selectedItems[selected])[0];
                const fileType =
                    selected === "files"
                        ? document
                              .querySelector(`.file[data-id="${itemToRename}"]`)
                              .querySelector(".type").textContent
                        : null;

                input.value = JSON.stringify({
                    type: selected,
                    id: itemToRename,
                    fileType,
                });

                closeModal("renameModal");
            }

            // Share file
            function openShareModal() {
                if (!Object.keys(selectedItems).length > 0) return;
                const canSend =
                    Object.values(selectedItems).filter((set) => set.size === 1)
                        .length === 1;
                if (!canSend) return;

                document.getElementById("shareModal").classList.add("active");
            }

            function shareFile(event) {
                // prevent form from auto-submitting before we update the action
                event.preventDefault();

                const selected = Object.keys(selectedItems).find(
                    (key) => selectedItems[key].size === 1
                );
                const itemToSend = Array.from(selectedItems[selected])[0];
                const email = document.getElementById("shareEmail").value;
                const form = document.getElementById("shareForm");

                if (email) {
                    // dynamically update the action
                    form.action = `<%= locals.path %>/share/${encodeURIComponent(
                        itemToSend
                    )}`;
                    console.log("Form action set to", form.action);
                    form.submit();
                    closeModal("shareModal");
                }
            }

            // Initialize theme
            function initTheme() {
                const savedTheme = localStorage.getItem("theme") || "dark";
                document.documentElement.setAttribute("data-theme", savedTheme);
            }

            initTheme();
        </script>
    </body>
</html>
